// Code generated by ent, DO NOT EDIT.

package projectdomain

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/usegranthq/backend/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.ProjectDomain {
	return predicate.ProjectDomain(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.ProjectDomain {
	return predicate.ProjectDomain(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.ProjectDomain {
	return predicate.ProjectDomain(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.ProjectDomain {
	return predicate.ProjectDomain(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.ProjectDomain {
	return predicate.ProjectDomain(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.ProjectDomain {
	return predicate.ProjectDomain(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.ProjectDomain {
	return predicate.ProjectDomain(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.ProjectDomain {
	return predicate.ProjectDomain(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.ProjectDomain {
	return predicate.ProjectDomain(sql.FieldLTE(FieldID, id))
}

// Domain applies equality check predicate on the "domain" field. It's identical to DomainEQ.
func Domain(v string) predicate.ProjectDomain {
	return predicate.ProjectDomain(sql.FieldEQ(FieldDomain, v))
}

// Verified applies equality check predicate on the "verified" field. It's identical to VerifiedEQ.
func Verified(v bool) predicate.ProjectDomain {
	return predicate.ProjectDomain(sql.FieldEQ(FieldVerified, v))
}

// VerifiedAt applies equality check predicate on the "verified_at" field. It's identical to VerifiedAtEQ.
func VerifiedAt(v string) predicate.ProjectDomain {
	return predicate.ProjectDomain(sql.FieldEQ(FieldVerifiedAt, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ProjectDomain {
	return predicate.ProjectDomain(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.ProjectDomain {
	return predicate.ProjectDomain(sql.FieldEQ(FieldUpdatedAt, v))
}

// DomainEQ applies the EQ predicate on the "domain" field.
func DomainEQ(v string) predicate.ProjectDomain {
	return predicate.ProjectDomain(sql.FieldEQ(FieldDomain, v))
}

// DomainNEQ applies the NEQ predicate on the "domain" field.
func DomainNEQ(v string) predicate.ProjectDomain {
	return predicate.ProjectDomain(sql.FieldNEQ(FieldDomain, v))
}

// DomainIn applies the In predicate on the "domain" field.
func DomainIn(vs ...string) predicate.ProjectDomain {
	return predicate.ProjectDomain(sql.FieldIn(FieldDomain, vs...))
}

// DomainNotIn applies the NotIn predicate on the "domain" field.
func DomainNotIn(vs ...string) predicate.ProjectDomain {
	return predicate.ProjectDomain(sql.FieldNotIn(FieldDomain, vs...))
}

// DomainGT applies the GT predicate on the "domain" field.
func DomainGT(v string) predicate.ProjectDomain {
	return predicate.ProjectDomain(sql.FieldGT(FieldDomain, v))
}

// DomainGTE applies the GTE predicate on the "domain" field.
func DomainGTE(v string) predicate.ProjectDomain {
	return predicate.ProjectDomain(sql.FieldGTE(FieldDomain, v))
}

// DomainLT applies the LT predicate on the "domain" field.
func DomainLT(v string) predicate.ProjectDomain {
	return predicate.ProjectDomain(sql.FieldLT(FieldDomain, v))
}

// DomainLTE applies the LTE predicate on the "domain" field.
func DomainLTE(v string) predicate.ProjectDomain {
	return predicate.ProjectDomain(sql.FieldLTE(FieldDomain, v))
}

// DomainContains applies the Contains predicate on the "domain" field.
func DomainContains(v string) predicate.ProjectDomain {
	return predicate.ProjectDomain(sql.FieldContains(FieldDomain, v))
}

// DomainHasPrefix applies the HasPrefix predicate on the "domain" field.
func DomainHasPrefix(v string) predicate.ProjectDomain {
	return predicate.ProjectDomain(sql.FieldHasPrefix(FieldDomain, v))
}

// DomainHasSuffix applies the HasSuffix predicate on the "domain" field.
func DomainHasSuffix(v string) predicate.ProjectDomain {
	return predicate.ProjectDomain(sql.FieldHasSuffix(FieldDomain, v))
}

// DomainEqualFold applies the EqualFold predicate on the "domain" field.
func DomainEqualFold(v string) predicate.ProjectDomain {
	return predicate.ProjectDomain(sql.FieldEqualFold(FieldDomain, v))
}

// DomainContainsFold applies the ContainsFold predicate on the "domain" field.
func DomainContainsFold(v string) predicate.ProjectDomain {
	return predicate.ProjectDomain(sql.FieldContainsFold(FieldDomain, v))
}

// VerifiedEQ applies the EQ predicate on the "verified" field.
func VerifiedEQ(v bool) predicate.ProjectDomain {
	return predicate.ProjectDomain(sql.FieldEQ(FieldVerified, v))
}

// VerifiedNEQ applies the NEQ predicate on the "verified" field.
func VerifiedNEQ(v bool) predicate.ProjectDomain {
	return predicate.ProjectDomain(sql.FieldNEQ(FieldVerified, v))
}

// VerifiedAtEQ applies the EQ predicate on the "verified_at" field.
func VerifiedAtEQ(v string) predicate.ProjectDomain {
	return predicate.ProjectDomain(sql.FieldEQ(FieldVerifiedAt, v))
}

// VerifiedAtNEQ applies the NEQ predicate on the "verified_at" field.
func VerifiedAtNEQ(v string) predicate.ProjectDomain {
	return predicate.ProjectDomain(sql.FieldNEQ(FieldVerifiedAt, v))
}

// VerifiedAtIn applies the In predicate on the "verified_at" field.
func VerifiedAtIn(vs ...string) predicate.ProjectDomain {
	return predicate.ProjectDomain(sql.FieldIn(FieldVerifiedAt, vs...))
}

// VerifiedAtNotIn applies the NotIn predicate on the "verified_at" field.
func VerifiedAtNotIn(vs ...string) predicate.ProjectDomain {
	return predicate.ProjectDomain(sql.FieldNotIn(FieldVerifiedAt, vs...))
}

// VerifiedAtGT applies the GT predicate on the "verified_at" field.
func VerifiedAtGT(v string) predicate.ProjectDomain {
	return predicate.ProjectDomain(sql.FieldGT(FieldVerifiedAt, v))
}

// VerifiedAtGTE applies the GTE predicate on the "verified_at" field.
func VerifiedAtGTE(v string) predicate.ProjectDomain {
	return predicate.ProjectDomain(sql.FieldGTE(FieldVerifiedAt, v))
}

// VerifiedAtLT applies the LT predicate on the "verified_at" field.
func VerifiedAtLT(v string) predicate.ProjectDomain {
	return predicate.ProjectDomain(sql.FieldLT(FieldVerifiedAt, v))
}

// VerifiedAtLTE applies the LTE predicate on the "verified_at" field.
func VerifiedAtLTE(v string) predicate.ProjectDomain {
	return predicate.ProjectDomain(sql.FieldLTE(FieldVerifiedAt, v))
}

// VerifiedAtContains applies the Contains predicate on the "verified_at" field.
func VerifiedAtContains(v string) predicate.ProjectDomain {
	return predicate.ProjectDomain(sql.FieldContains(FieldVerifiedAt, v))
}

// VerifiedAtHasPrefix applies the HasPrefix predicate on the "verified_at" field.
func VerifiedAtHasPrefix(v string) predicate.ProjectDomain {
	return predicate.ProjectDomain(sql.FieldHasPrefix(FieldVerifiedAt, v))
}

// VerifiedAtHasSuffix applies the HasSuffix predicate on the "verified_at" field.
func VerifiedAtHasSuffix(v string) predicate.ProjectDomain {
	return predicate.ProjectDomain(sql.FieldHasSuffix(FieldVerifiedAt, v))
}

// VerifiedAtIsNil applies the IsNil predicate on the "verified_at" field.
func VerifiedAtIsNil() predicate.ProjectDomain {
	return predicate.ProjectDomain(sql.FieldIsNull(FieldVerifiedAt))
}

// VerifiedAtNotNil applies the NotNil predicate on the "verified_at" field.
func VerifiedAtNotNil() predicate.ProjectDomain {
	return predicate.ProjectDomain(sql.FieldNotNull(FieldVerifiedAt))
}

// VerifiedAtEqualFold applies the EqualFold predicate on the "verified_at" field.
func VerifiedAtEqualFold(v string) predicate.ProjectDomain {
	return predicate.ProjectDomain(sql.FieldEqualFold(FieldVerifiedAt, v))
}

// VerifiedAtContainsFold applies the ContainsFold predicate on the "verified_at" field.
func VerifiedAtContainsFold(v string) predicate.ProjectDomain {
	return predicate.ProjectDomain(sql.FieldContainsFold(FieldVerifiedAt, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.ProjectDomain {
	return predicate.ProjectDomain(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.ProjectDomain {
	return predicate.ProjectDomain(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.ProjectDomain {
	return predicate.ProjectDomain(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ProjectDomain {
	return predicate.ProjectDomain(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.ProjectDomain {
	return predicate.ProjectDomain(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.ProjectDomain {
	return predicate.ProjectDomain(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.ProjectDomain {
	return predicate.ProjectDomain(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.ProjectDomain {
	return predicate.ProjectDomain(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.ProjectDomain {
	return predicate.ProjectDomain(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.ProjectDomain {
	return predicate.ProjectDomain(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.ProjectDomain {
	return predicate.ProjectDomain(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.ProjectDomain {
	return predicate.ProjectDomain(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.ProjectDomain {
	return predicate.ProjectDomain(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.ProjectDomain {
	return predicate.ProjectDomain(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.ProjectDomain {
	return predicate.ProjectDomain(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.ProjectDomain {
	return predicate.ProjectDomain(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasProject applies the HasEdge predicate on the "project" edge.
func HasProject() predicate.ProjectDomain {
	return predicate.ProjectDomain(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProjectTable, ProjectColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProjectWith applies the HasEdge predicate on the "project" edge with a given conditions (other predicates).
func HasProjectWith(preds ...predicate.Project) predicate.ProjectDomain {
	return predicate.ProjectDomain(func(s *sql.Selector) {
		step := newProjectStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ProjectDomain) predicate.ProjectDomain {
	return predicate.ProjectDomain(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ProjectDomain) predicate.ProjectDomain {
	return predicate.ProjectDomain(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ProjectDomain) predicate.ProjectDomain {
	return predicate.ProjectDomain(sql.NotPredicates(p))
}
