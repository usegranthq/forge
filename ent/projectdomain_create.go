// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/usegranthq/backend/ent/project"
	"github.com/usegranthq/backend/ent/projectdomain"
)

// ProjectDomainCreate is the builder for creating a ProjectDomain entity.
type ProjectDomainCreate struct {
	config
	mutation *ProjectDomainMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetDomain sets the "domain" field.
func (pdc *ProjectDomainCreate) SetDomain(s string) *ProjectDomainCreate {
	pdc.mutation.SetDomain(s)
	return pdc
}

// SetVerified sets the "verified" field.
func (pdc *ProjectDomainCreate) SetVerified(b bool) *ProjectDomainCreate {
	pdc.mutation.SetVerified(b)
	return pdc
}

// SetNillableVerified sets the "verified" field if the given value is not nil.
func (pdc *ProjectDomainCreate) SetNillableVerified(b *bool) *ProjectDomainCreate {
	if b != nil {
		pdc.SetVerified(*b)
	}
	return pdc
}

// SetVerifiedAt sets the "verified_at" field.
func (pdc *ProjectDomainCreate) SetVerifiedAt(s string) *ProjectDomainCreate {
	pdc.mutation.SetVerifiedAt(s)
	return pdc
}

// SetNillableVerifiedAt sets the "verified_at" field if the given value is not nil.
func (pdc *ProjectDomainCreate) SetNillableVerifiedAt(s *string) *ProjectDomainCreate {
	if s != nil {
		pdc.SetVerifiedAt(*s)
	}
	return pdc
}

// SetCreatedAt sets the "created_at" field.
func (pdc *ProjectDomainCreate) SetCreatedAt(t time.Time) *ProjectDomainCreate {
	pdc.mutation.SetCreatedAt(t)
	return pdc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pdc *ProjectDomainCreate) SetNillableCreatedAt(t *time.Time) *ProjectDomainCreate {
	if t != nil {
		pdc.SetCreatedAt(*t)
	}
	return pdc
}

// SetUpdatedAt sets the "updated_at" field.
func (pdc *ProjectDomainCreate) SetUpdatedAt(t time.Time) *ProjectDomainCreate {
	pdc.mutation.SetUpdatedAt(t)
	return pdc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pdc *ProjectDomainCreate) SetNillableUpdatedAt(t *time.Time) *ProjectDomainCreate {
	if t != nil {
		pdc.SetUpdatedAt(*t)
	}
	return pdc
}

// SetID sets the "id" field.
func (pdc *ProjectDomainCreate) SetID(u uuid.UUID) *ProjectDomainCreate {
	pdc.mutation.SetID(u)
	return pdc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (pdc *ProjectDomainCreate) SetNillableID(u *uuid.UUID) *ProjectDomainCreate {
	if u != nil {
		pdc.SetID(*u)
	}
	return pdc
}

// SetProjectID sets the "project" edge to the Project entity by ID.
func (pdc *ProjectDomainCreate) SetProjectID(id uuid.UUID) *ProjectDomainCreate {
	pdc.mutation.SetProjectID(id)
	return pdc
}

// SetProject sets the "project" edge to the Project entity.
func (pdc *ProjectDomainCreate) SetProject(p *Project) *ProjectDomainCreate {
	return pdc.SetProjectID(p.ID)
}

// Mutation returns the ProjectDomainMutation object of the builder.
func (pdc *ProjectDomainCreate) Mutation() *ProjectDomainMutation {
	return pdc.mutation
}

// Save creates the ProjectDomain in the database.
func (pdc *ProjectDomainCreate) Save(ctx context.Context) (*ProjectDomain, error) {
	pdc.defaults()
	return withHooks(ctx, pdc.sqlSave, pdc.mutation, pdc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pdc *ProjectDomainCreate) SaveX(ctx context.Context) *ProjectDomain {
	v, err := pdc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pdc *ProjectDomainCreate) Exec(ctx context.Context) error {
	_, err := pdc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pdc *ProjectDomainCreate) ExecX(ctx context.Context) {
	if err := pdc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pdc *ProjectDomainCreate) defaults() {
	if _, ok := pdc.mutation.Verified(); !ok {
		v := projectdomain.DefaultVerified
		pdc.mutation.SetVerified(v)
	}
	if _, ok := pdc.mutation.CreatedAt(); !ok {
		v := projectdomain.DefaultCreatedAt()
		pdc.mutation.SetCreatedAt(v)
	}
	if _, ok := pdc.mutation.UpdatedAt(); !ok {
		v := projectdomain.DefaultUpdatedAt()
		pdc.mutation.SetUpdatedAt(v)
	}
	if _, ok := pdc.mutation.ID(); !ok {
		v := projectdomain.DefaultID()
		pdc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pdc *ProjectDomainCreate) check() error {
	if _, ok := pdc.mutation.Domain(); !ok {
		return &ValidationError{Name: "domain", err: errors.New(`ent: missing required field "ProjectDomain.domain"`)}
	}
	if v, ok := pdc.mutation.Domain(); ok {
		if err := projectdomain.DomainValidator(v); err != nil {
			return &ValidationError{Name: "domain", err: fmt.Errorf(`ent: validator failed for field "ProjectDomain.domain": %w`, err)}
		}
	}
	if _, ok := pdc.mutation.Verified(); !ok {
		return &ValidationError{Name: "verified", err: errors.New(`ent: missing required field "ProjectDomain.verified"`)}
	}
	if _, ok := pdc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ProjectDomain.created_at"`)}
	}
	if _, ok := pdc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "ProjectDomain.updated_at"`)}
	}
	if len(pdc.mutation.ProjectIDs()) == 0 {
		return &ValidationError{Name: "project", err: errors.New(`ent: missing required edge "ProjectDomain.project"`)}
	}
	return nil
}

func (pdc *ProjectDomainCreate) sqlSave(ctx context.Context) (*ProjectDomain, error) {
	if err := pdc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pdc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pdc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	pdc.mutation.id = &_node.ID
	pdc.mutation.done = true
	return _node, nil
}

func (pdc *ProjectDomainCreate) createSpec() (*ProjectDomain, *sqlgraph.CreateSpec) {
	var (
		_node = &ProjectDomain{config: pdc.config}
		_spec = sqlgraph.NewCreateSpec(projectdomain.Table, sqlgraph.NewFieldSpec(projectdomain.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = pdc.conflict
	if id, ok := pdc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := pdc.mutation.Domain(); ok {
		_spec.SetField(projectdomain.FieldDomain, field.TypeString, value)
		_node.Domain = value
	}
	if value, ok := pdc.mutation.Verified(); ok {
		_spec.SetField(projectdomain.FieldVerified, field.TypeBool, value)
		_node.Verified = value
	}
	if value, ok := pdc.mutation.VerifiedAt(); ok {
		_spec.SetField(projectdomain.FieldVerifiedAt, field.TypeString, value)
		_node.VerifiedAt = value
	}
	if value, ok := pdc.mutation.CreatedAt(); ok {
		_spec.SetField(projectdomain.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pdc.mutation.UpdatedAt(); ok {
		_spec.SetField(projectdomain.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := pdc.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projectdomain.ProjectTable,
			Columns: []string{projectdomain.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.project_domain = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ProjectDomain.Create().
//		SetDomain(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ProjectDomainUpsert) {
//			SetDomain(v+v).
//		}).
//		Exec(ctx)
func (pdc *ProjectDomainCreate) OnConflict(opts ...sql.ConflictOption) *ProjectDomainUpsertOne {
	pdc.conflict = opts
	return &ProjectDomainUpsertOne{
		create: pdc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ProjectDomain.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pdc *ProjectDomainCreate) OnConflictColumns(columns ...string) *ProjectDomainUpsertOne {
	pdc.conflict = append(pdc.conflict, sql.ConflictColumns(columns...))
	return &ProjectDomainUpsertOne{
		create: pdc,
	}
}

type (
	// ProjectDomainUpsertOne is the builder for "upsert"-ing
	//  one ProjectDomain node.
	ProjectDomainUpsertOne struct {
		create *ProjectDomainCreate
	}

	// ProjectDomainUpsert is the "OnConflict" setter.
	ProjectDomainUpsert struct {
		*sql.UpdateSet
	}
)

// SetDomain sets the "domain" field.
func (u *ProjectDomainUpsert) SetDomain(v string) *ProjectDomainUpsert {
	u.Set(projectdomain.FieldDomain, v)
	return u
}

// UpdateDomain sets the "domain" field to the value that was provided on create.
func (u *ProjectDomainUpsert) UpdateDomain() *ProjectDomainUpsert {
	u.SetExcluded(projectdomain.FieldDomain)
	return u
}

// SetVerified sets the "verified" field.
func (u *ProjectDomainUpsert) SetVerified(v bool) *ProjectDomainUpsert {
	u.Set(projectdomain.FieldVerified, v)
	return u
}

// UpdateVerified sets the "verified" field to the value that was provided on create.
func (u *ProjectDomainUpsert) UpdateVerified() *ProjectDomainUpsert {
	u.SetExcluded(projectdomain.FieldVerified)
	return u
}

// SetVerifiedAt sets the "verified_at" field.
func (u *ProjectDomainUpsert) SetVerifiedAt(v string) *ProjectDomainUpsert {
	u.Set(projectdomain.FieldVerifiedAt, v)
	return u
}

// UpdateVerifiedAt sets the "verified_at" field to the value that was provided on create.
func (u *ProjectDomainUpsert) UpdateVerifiedAt() *ProjectDomainUpsert {
	u.SetExcluded(projectdomain.FieldVerifiedAt)
	return u
}

// ClearVerifiedAt clears the value of the "verified_at" field.
func (u *ProjectDomainUpsert) ClearVerifiedAt() *ProjectDomainUpsert {
	u.SetNull(projectdomain.FieldVerifiedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ProjectDomainUpsert) SetUpdatedAt(v time.Time) *ProjectDomainUpsert {
	u.Set(projectdomain.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ProjectDomainUpsert) UpdateUpdatedAt() *ProjectDomainUpsert {
	u.SetExcluded(projectdomain.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.ProjectDomain.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(projectdomain.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ProjectDomainUpsertOne) UpdateNewValues() *ProjectDomainUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(projectdomain.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(projectdomain.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ProjectDomain.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ProjectDomainUpsertOne) Ignore() *ProjectDomainUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ProjectDomainUpsertOne) DoNothing() *ProjectDomainUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ProjectDomainCreate.OnConflict
// documentation for more info.
func (u *ProjectDomainUpsertOne) Update(set func(*ProjectDomainUpsert)) *ProjectDomainUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ProjectDomainUpsert{UpdateSet: update})
	}))
	return u
}

// SetDomain sets the "domain" field.
func (u *ProjectDomainUpsertOne) SetDomain(v string) *ProjectDomainUpsertOne {
	return u.Update(func(s *ProjectDomainUpsert) {
		s.SetDomain(v)
	})
}

// UpdateDomain sets the "domain" field to the value that was provided on create.
func (u *ProjectDomainUpsertOne) UpdateDomain() *ProjectDomainUpsertOne {
	return u.Update(func(s *ProjectDomainUpsert) {
		s.UpdateDomain()
	})
}

// SetVerified sets the "verified" field.
func (u *ProjectDomainUpsertOne) SetVerified(v bool) *ProjectDomainUpsertOne {
	return u.Update(func(s *ProjectDomainUpsert) {
		s.SetVerified(v)
	})
}

// UpdateVerified sets the "verified" field to the value that was provided on create.
func (u *ProjectDomainUpsertOne) UpdateVerified() *ProjectDomainUpsertOne {
	return u.Update(func(s *ProjectDomainUpsert) {
		s.UpdateVerified()
	})
}

// SetVerifiedAt sets the "verified_at" field.
func (u *ProjectDomainUpsertOne) SetVerifiedAt(v string) *ProjectDomainUpsertOne {
	return u.Update(func(s *ProjectDomainUpsert) {
		s.SetVerifiedAt(v)
	})
}

// UpdateVerifiedAt sets the "verified_at" field to the value that was provided on create.
func (u *ProjectDomainUpsertOne) UpdateVerifiedAt() *ProjectDomainUpsertOne {
	return u.Update(func(s *ProjectDomainUpsert) {
		s.UpdateVerifiedAt()
	})
}

// ClearVerifiedAt clears the value of the "verified_at" field.
func (u *ProjectDomainUpsertOne) ClearVerifiedAt() *ProjectDomainUpsertOne {
	return u.Update(func(s *ProjectDomainUpsert) {
		s.ClearVerifiedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ProjectDomainUpsertOne) SetUpdatedAt(v time.Time) *ProjectDomainUpsertOne {
	return u.Update(func(s *ProjectDomainUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ProjectDomainUpsertOne) UpdateUpdatedAt() *ProjectDomainUpsertOne {
	return u.Update(func(s *ProjectDomainUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *ProjectDomainUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ProjectDomainCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ProjectDomainUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ProjectDomainUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: ProjectDomainUpsertOne.ID is not supported by MySQL driver. Use ProjectDomainUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ProjectDomainUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ProjectDomainCreateBulk is the builder for creating many ProjectDomain entities in bulk.
type ProjectDomainCreateBulk struct {
	config
	err      error
	builders []*ProjectDomainCreate
	conflict []sql.ConflictOption
}

// Save creates the ProjectDomain entities in the database.
func (pdcb *ProjectDomainCreateBulk) Save(ctx context.Context) ([]*ProjectDomain, error) {
	if pdcb.err != nil {
		return nil, pdcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pdcb.builders))
	nodes := make([]*ProjectDomain, len(pdcb.builders))
	mutators := make([]Mutator, len(pdcb.builders))
	for i := range pdcb.builders {
		func(i int, root context.Context) {
			builder := pdcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProjectDomainMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pdcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pdcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pdcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pdcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pdcb *ProjectDomainCreateBulk) SaveX(ctx context.Context) []*ProjectDomain {
	v, err := pdcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pdcb *ProjectDomainCreateBulk) Exec(ctx context.Context) error {
	_, err := pdcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pdcb *ProjectDomainCreateBulk) ExecX(ctx context.Context) {
	if err := pdcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ProjectDomain.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ProjectDomainUpsert) {
//			SetDomain(v+v).
//		}).
//		Exec(ctx)
func (pdcb *ProjectDomainCreateBulk) OnConflict(opts ...sql.ConflictOption) *ProjectDomainUpsertBulk {
	pdcb.conflict = opts
	return &ProjectDomainUpsertBulk{
		create: pdcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ProjectDomain.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pdcb *ProjectDomainCreateBulk) OnConflictColumns(columns ...string) *ProjectDomainUpsertBulk {
	pdcb.conflict = append(pdcb.conflict, sql.ConflictColumns(columns...))
	return &ProjectDomainUpsertBulk{
		create: pdcb,
	}
}

// ProjectDomainUpsertBulk is the builder for "upsert"-ing
// a bulk of ProjectDomain nodes.
type ProjectDomainUpsertBulk struct {
	create *ProjectDomainCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ProjectDomain.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(projectdomain.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ProjectDomainUpsertBulk) UpdateNewValues() *ProjectDomainUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(projectdomain.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(projectdomain.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ProjectDomain.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ProjectDomainUpsertBulk) Ignore() *ProjectDomainUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ProjectDomainUpsertBulk) DoNothing() *ProjectDomainUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ProjectDomainCreateBulk.OnConflict
// documentation for more info.
func (u *ProjectDomainUpsertBulk) Update(set func(*ProjectDomainUpsert)) *ProjectDomainUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ProjectDomainUpsert{UpdateSet: update})
	}))
	return u
}

// SetDomain sets the "domain" field.
func (u *ProjectDomainUpsertBulk) SetDomain(v string) *ProjectDomainUpsertBulk {
	return u.Update(func(s *ProjectDomainUpsert) {
		s.SetDomain(v)
	})
}

// UpdateDomain sets the "domain" field to the value that was provided on create.
func (u *ProjectDomainUpsertBulk) UpdateDomain() *ProjectDomainUpsertBulk {
	return u.Update(func(s *ProjectDomainUpsert) {
		s.UpdateDomain()
	})
}

// SetVerified sets the "verified" field.
func (u *ProjectDomainUpsertBulk) SetVerified(v bool) *ProjectDomainUpsertBulk {
	return u.Update(func(s *ProjectDomainUpsert) {
		s.SetVerified(v)
	})
}

// UpdateVerified sets the "verified" field to the value that was provided on create.
func (u *ProjectDomainUpsertBulk) UpdateVerified() *ProjectDomainUpsertBulk {
	return u.Update(func(s *ProjectDomainUpsert) {
		s.UpdateVerified()
	})
}

// SetVerifiedAt sets the "verified_at" field.
func (u *ProjectDomainUpsertBulk) SetVerifiedAt(v string) *ProjectDomainUpsertBulk {
	return u.Update(func(s *ProjectDomainUpsert) {
		s.SetVerifiedAt(v)
	})
}

// UpdateVerifiedAt sets the "verified_at" field to the value that was provided on create.
func (u *ProjectDomainUpsertBulk) UpdateVerifiedAt() *ProjectDomainUpsertBulk {
	return u.Update(func(s *ProjectDomainUpsert) {
		s.UpdateVerifiedAt()
	})
}

// ClearVerifiedAt clears the value of the "verified_at" field.
func (u *ProjectDomainUpsertBulk) ClearVerifiedAt() *ProjectDomainUpsertBulk {
	return u.Update(func(s *ProjectDomainUpsert) {
		s.ClearVerifiedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ProjectDomainUpsertBulk) SetUpdatedAt(v time.Time) *ProjectDomainUpsertBulk {
	return u.Update(func(s *ProjectDomainUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ProjectDomainUpsertBulk) UpdateUpdatedAt() *ProjectDomainUpsertBulk {
	return u.Update(func(s *ProjectDomainUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *ProjectDomainUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ProjectDomainCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ProjectDomainCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ProjectDomainUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
