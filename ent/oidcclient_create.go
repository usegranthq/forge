// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/usegranthq/backend/ent/oidcclient"
	"github.com/usegranthq/backend/ent/project"
)

// OidcClientCreate is the builder for creating a OidcClient entity.
type OidcClientCreate struct {
	config
	mutation *OidcClientMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (occ *OidcClientCreate) SetName(s string) *OidcClientCreate {
	occ.mutation.SetName(s)
	return occ
}

// SetClientID sets the "client_id" field.
func (occ *OidcClientCreate) SetClientID(s string) *OidcClientCreate {
	occ.mutation.SetClientID(s)
	return occ
}

// SetCreatedAt sets the "created_at" field.
func (occ *OidcClientCreate) SetCreatedAt(t time.Time) *OidcClientCreate {
	occ.mutation.SetCreatedAt(t)
	return occ
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (occ *OidcClientCreate) SetNillableCreatedAt(t *time.Time) *OidcClientCreate {
	if t != nil {
		occ.SetCreatedAt(*t)
	}
	return occ
}

// SetUpdatedAt sets the "updated_at" field.
func (occ *OidcClientCreate) SetUpdatedAt(t time.Time) *OidcClientCreate {
	occ.mutation.SetUpdatedAt(t)
	return occ
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (occ *OidcClientCreate) SetNillableUpdatedAt(t *time.Time) *OidcClientCreate {
	if t != nil {
		occ.SetUpdatedAt(*t)
	}
	return occ
}

// SetID sets the "id" field.
func (occ *OidcClientCreate) SetID(u uuid.UUID) *OidcClientCreate {
	occ.mutation.SetID(u)
	return occ
}

// SetNillableID sets the "id" field if the given value is not nil.
func (occ *OidcClientCreate) SetNillableID(u *uuid.UUID) *OidcClientCreate {
	if u != nil {
		occ.SetID(*u)
	}
	return occ
}

// SetProjectID sets the "project" edge to the Project entity by ID.
func (occ *OidcClientCreate) SetProjectID(id uuid.UUID) *OidcClientCreate {
	occ.mutation.SetProjectID(id)
	return occ
}

// SetProject sets the "project" edge to the Project entity.
func (occ *OidcClientCreate) SetProject(p *Project) *OidcClientCreate {
	return occ.SetProjectID(p.ID)
}

// Mutation returns the OidcClientMutation object of the builder.
func (occ *OidcClientCreate) Mutation() *OidcClientMutation {
	return occ.mutation
}

// Save creates the OidcClient in the database.
func (occ *OidcClientCreate) Save(ctx context.Context) (*OidcClient, error) {
	occ.defaults()
	return withHooks(ctx, occ.sqlSave, occ.mutation, occ.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (occ *OidcClientCreate) SaveX(ctx context.Context) *OidcClient {
	v, err := occ.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (occ *OidcClientCreate) Exec(ctx context.Context) error {
	_, err := occ.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (occ *OidcClientCreate) ExecX(ctx context.Context) {
	if err := occ.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (occ *OidcClientCreate) defaults() {
	if _, ok := occ.mutation.CreatedAt(); !ok {
		v := oidcclient.DefaultCreatedAt()
		occ.mutation.SetCreatedAt(v)
	}
	if _, ok := occ.mutation.UpdatedAt(); !ok {
		v := oidcclient.DefaultUpdatedAt()
		occ.mutation.SetUpdatedAt(v)
	}
	if _, ok := occ.mutation.ID(); !ok {
		v := oidcclient.DefaultID()
		occ.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (occ *OidcClientCreate) check() error {
	if _, ok := occ.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "OidcClient.name"`)}
	}
	if v, ok := occ.mutation.Name(); ok {
		if err := oidcclient.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "OidcClient.name": %w`, err)}
		}
	}
	if _, ok := occ.mutation.ClientID(); !ok {
		return &ValidationError{Name: "client_id", err: errors.New(`ent: missing required field "OidcClient.client_id"`)}
	}
	if v, ok := occ.mutation.ClientID(); ok {
		if err := oidcclient.ClientIDValidator(v); err != nil {
			return &ValidationError{Name: "client_id", err: fmt.Errorf(`ent: validator failed for field "OidcClient.client_id": %w`, err)}
		}
	}
	if _, ok := occ.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "OidcClient.created_at"`)}
	}
	if _, ok := occ.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "OidcClient.updated_at"`)}
	}
	if len(occ.mutation.ProjectIDs()) == 0 {
		return &ValidationError{Name: "project", err: errors.New(`ent: missing required edge "OidcClient.project"`)}
	}
	return nil
}

func (occ *OidcClientCreate) sqlSave(ctx context.Context) (*OidcClient, error) {
	if err := occ.check(); err != nil {
		return nil, err
	}
	_node, _spec := occ.createSpec()
	if err := sqlgraph.CreateNode(ctx, occ.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	occ.mutation.id = &_node.ID
	occ.mutation.done = true
	return _node, nil
}

func (occ *OidcClientCreate) createSpec() (*OidcClient, *sqlgraph.CreateSpec) {
	var (
		_node = &OidcClient{config: occ.config}
		_spec = sqlgraph.NewCreateSpec(oidcclient.Table, sqlgraph.NewFieldSpec(oidcclient.FieldID, field.TypeUUID))
	)
	if id, ok := occ.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := occ.mutation.Name(); ok {
		_spec.SetField(oidcclient.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := occ.mutation.ClientID(); ok {
		_spec.SetField(oidcclient.FieldClientID, field.TypeString, value)
		_node.ClientID = value
	}
	if value, ok := occ.mutation.CreatedAt(); ok {
		_spec.SetField(oidcclient.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := occ.mutation.UpdatedAt(); ok {
		_spec.SetField(oidcclient.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := occ.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oidcclient.ProjectTable,
			Columns: []string{oidcclient.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.project_oidc_clients = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OidcClientCreateBulk is the builder for creating many OidcClient entities in bulk.
type OidcClientCreateBulk struct {
	config
	err      error
	builders []*OidcClientCreate
}

// Save creates the OidcClient entities in the database.
func (occb *OidcClientCreateBulk) Save(ctx context.Context) ([]*OidcClient, error) {
	if occb.err != nil {
		return nil, occb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(occb.builders))
	nodes := make([]*OidcClient, len(occb.builders))
	mutators := make([]Mutator, len(occb.builders))
	for i := range occb.builders {
		func(i int, root context.Context) {
			builder := occb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OidcClientMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, occb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, occb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, occb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (occb *OidcClientCreateBulk) SaveX(ctx context.Context) []*OidcClient {
	v, err := occb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (occb *OidcClientCreateBulk) Exec(ctx context.Context) error {
	_, err := occb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (occb *OidcClientCreateBulk) ExecX(ctx context.Context) {
	if err := occb.Exec(ctx); err != nil {
		panic(err)
	}
}
