// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/usegranthq/backend/ent/oidcclient"
	"github.com/usegranthq/backend/ent/project"
)

// OidcClient is the model entity for the OidcClient schema.
type OidcClient struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// ClientID holds the value of the "client_id" field.
	ClientID string `json:"client_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OidcClientQuery when eager-loading is set.
	Edges                OidcClientEdges `json:"edges"`
	project_oidc_clients *uuid.UUID
	selectValues         sql.SelectValues
}

// OidcClientEdges holds the relations/edges for other nodes in the graph.
type OidcClientEdges struct {
	// Project holds the value of the project edge.
	Project *Project `json:"project,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ProjectOrErr returns the Project value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OidcClientEdges) ProjectOrErr() (*Project, error) {
	if e.Project != nil {
		return e.Project, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: project.Label}
	}
	return nil, &NotLoadedError{edge: "project"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OidcClient) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case oidcclient.FieldName, oidcclient.FieldClientID:
			values[i] = new(sql.NullString)
		case oidcclient.FieldCreatedAt, oidcclient.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case oidcclient.FieldID:
			values[i] = new(uuid.UUID)
		case oidcclient.ForeignKeys[0]: // project_oidc_clients
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OidcClient fields.
func (oc *OidcClient) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case oidcclient.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				oc.ID = *value
			}
		case oidcclient.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				oc.Name = value.String
			}
		case oidcclient.FieldClientID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field client_id", values[i])
			} else if value.Valid {
				oc.ClientID = value.String
			}
		case oidcclient.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				oc.CreatedAt = value.Time
			}
		case oidcclient.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				oc.UpdatedAt = value.Time
			}
		case oidcclient.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field project_oidc_clients", values[i])
			} else if value.Valid {
				oc.project_oidc_clients = new(uuid.UUID)
				*oc.project_oidc_clients = *value.S.(*uuid.UUID)
			}
		default:
			oc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the OidcClient.
// This includes values selected through modifiers, order, etc.
func (oc *OidcClient) Value(name string) (ent.Value, error) {
	return oc.selectValues.Get(name)
}

// QueryProject queries the "project" edge of the OidcClient entity.
func (oc *OidcClient) QueryProject() *ProjectQuery {
	return NewOidcClientClient(oc.config).QueryProject(oc)
}

// Update returns a builder for updating this OidcClient.
// Note that you need to call OidcClient.Unwrap() before calling this method if this OidcClient
// was returned from a transaction, and the transaction was committed or rolled back.
func (oc *OidcClient) Update() *OidcClientUpdateOne {
	return NewOidcClientClient(oc.config).UpdateOne(oc)
}

// Unwrap unwraps the OidcClient entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (oc *OidcClient) Unwrap() *OidcClient {
	_tx, ok := oc.config.driver.(*txDriver)
	if !ok {
		panic("ent: OidcClient is not a transactional entity")
	}
	oc.config.driver = _tx.drv
	return oc
}

// String implements the fmt.Stringer.
func (oc *OidcClient) String() string {
	var builder strings.Builder
	builder.WriteString("OidcClient(")
	builder.WriteString(fmt.Sprintf("id=%v, ", oc.ID))
	builder.WriteString("name=")
	builder.WriteString(oc.Name)
	builder.WriteString(", ")
	builder.WriteString("client_id=")
	builder.WriteString(oc.ClientID)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(oc.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(oc.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// OidcClients is a parsable slice of OidcClient.
type OidcClients []*OidcClient
