// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/usegranthq/forge/ent/oidcclient"
	"github.com/usegranthq/forge/ent/predicate"
)

// OidcClientDelete is the builder for deleting a OidcClient entity.
type OidcClientDelete struct {
	config
	hooks    []Hook
	mutation *OidcClientMutation
}

// Where appends a list predicates to the OidcClientDelete builder.
func (ocd *OidcClientDelete) Where(ps ...predicate.OidcClient) *OidcClientDelete {
	ocd.mutation.Where(ps...)
	return ocd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (ocd *OidcClientDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, ocd.sqlExec, ocd.mutation, ocd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (ocd *OidcClientDelete) ExecX(ctx context.Context) int {
	n, err := ocd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (ocd *OidcClientDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(oidcclient.Table, sqlgraph.NewFieldSpec(oidcclient.FieldID, field.TypeUUID))
	if ps := ocd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, ocd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	ocd.mutation.done = true
	return affected, err
}

// OidcClientDeleteOne is the builder for deleting a single OidcClient entity.
type OidcClientDeleteOne struct {
	ocd *OidcClientDelete
}

// Where appends a list predicates to the OidcClientDelete builder.
func (ocdo *OidcClientDeleteOne) Where(ps ...predicate.OidcClient) *OidcClientDeleteOne {
	ocdo.ocd.mutation.Where(ps...)
	return ocdo
}

// Exec executes the deletion query.
func (ocdo *OidcClientDeleteOne) Exec(ctx context.Context) error {
	n, err := ocdo.ocd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{oidcclient.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (ocdo *OidcClientDeleteOne) ExecX(ctx context.Context) {
	if err := ocdo.Exec(ctx); err != nil {
		panic(err)
	}
}
