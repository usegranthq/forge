// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/usegranthq/backend/ent/predicate"
	"github.com/usegranthq/backend/ent/user"
	"github.com/usegranthq/backend/ent/verification"
)

// VerificationUpdate is the builder for updating Verification entities.
type VerificationUpdate struct {
	config
	hooks    []Hook
	mutation *VerificationMutation
}

// Where appends a list predicates to the VerificationUpdate builder.
func (vu *VerificationUpdate) Where(ps ...predicate.Verification) *VerificationUpdate {
	vu.mutation.Where(ps...)
	return vu
}

// SetType sets the "type" field.
func (vu *VerificationUpdate) SetType(v verification.Type) *VerificationUpdate {
	vu.mutation.SetType(v)
	return vu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (vu *VerificationUpdate) SetNillableType(v *verification.Type) *VerificationUpdate {
	if v != nil {
		vu.SetType(*v)
	}
	return vu
}

// SetCode sets the "code" field.
func (vu *VerificationUpdate) SetCode(s string) *VerificationUpdate {
	vu.mutation.SetCode(s)
	return vu
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (vu *VerificationUpdate) SetNillableCode(s *string) *VerificationUpdate {
	if s != nil {
		vu.SetCode(*s)
	}
	return vu
}

// SetAttempts sets the "attempts" field.
func (vu *VerificationUpdate) SetAttempts(i int) *VerificationUpdate {
	vu.mutation.ResetAttempts()
	vu.mutation.SetAttempts(i)
	return vu
}

// SetNillableAttempts sets the "attempts" field if the given value is not nil.
func (vu *VerificationUpdate) SetNillableAttempts(i *int) *VerificationUpdate {
	if i != nil {
		vu.SetAttempts(*i)
	}
	return vu
}

// AddAttempts adds i to the "attempts" field.
func (vu *VerificationUpdate) AddAttempts(i int) *VerificationUpdate {
	vu.mutation.AddAttempts(i)
	return vu
}

// SetExpiresAt sets the "expires_at" field.
func (vu *VerificationUpdate) SetExpiresAt(t time.Time) *VerificationUpdate {
	vu.mutation.SetExpiresAt(t)
	return vu
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (vu *VerificationUpdate) SetNillableExpiresAt(t *time.Time) *VerificationUpdate {
	if t != nil {
		vu.SetExpiresAt(*t)
	}
	return vu
}

// SetUpdatedAt sets the "updated_at" field.
func (vu *VerificationUpdate) SetUpdatedAt(t time.Time) *VerificationUpdate {
	vu.mutation.SetUpdatedAt(t)
	return vu
}

// SetUserID sets the "user" edge to the User entity by ID.
func (vu *VerificationUpdate) SetUserID(id uuid.UUID) *VerificationUpdate {
	vu.mutation.SetUserID(id)
	return vu
}

// SetUser sets the "user" edge to the User entity.
func (vu *VerificationUpdate) SetUser(u *User) *VerificationUpdate {
	return vu.SetUserID(u.ID)
}

// Mutation returns the VerificationMutation object of the builder.
func (vu *VerificationUpdate) Mutation() *VerificationMutation {
	return vu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (vu *VerificationUpdate) ClearUser() *VerificationUpdate {
	vu.mutation.ClearUser()
	return vu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vu *VerificationUpdate) Save(ctx context.Context) (int, error) {
	vu.defaults()
	return withHooks(ctx, vu.sqlSave, vu.mutation, vu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vu *VerificationUpdate) SaveX(ctx context.Context) int {
	affected, err := vu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vu *VerificationUpdate) Exec(ctx context.Context) error {
	_, err := vu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vu *VerificationUpdate) ExecX(ctx context.Context) {
	if err := vu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vu *VerificationUpdate) defaults() {
	if _, ok := vu.mutation.UpdatedAt(); !ok {
		v := verification.UpdateDefaultUpdatedAt()
		vu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vu *VerificationUpdate) check() error {
	if v, ok := vu.mutation.GetType(); ok {
		if err := verification.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Verification.type": %w`, err)}
		}
	}
	if v, ok := vu.mutation.Code(); ok {
		if err := verification.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "Verification.code": %w`, err)}
		}
	}
	if vu.mutation.UserCleared() && len(vu.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Verification.user"`)
	}
	return nil
}

func (vu *VerificationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := vu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(verification.Table, verification.Columns, sqlgraph.NewFieldSpec(verification.FieldID, field.TypeUUID))
	if ps := vu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vu.mutation.GetType(); ok {
		_spec.SetField(verification.FieldType, field.TypeEnum, value)
	}
	if value, ok := vu.mutation.Code(); ok {
		_spec.SetField(verification.FieldCode, field.TypeString, value)
	}
	if value, ok := vu.mutation.Attempts(); ok {
		_spec.SetField(verification.FieldAttempts, field.TypeInt, value)
	}
	if value, ok := vu.mutation.AddedAttempts(); ok {
		_spec.AddField(verification.FieldAttempts, field.TypeInt, value)
	}
	if value, ok := vu.mutation.ExpiresAt(); ok {
		_spec.SetField(verification.FieldExpiresAt, field.TypeTime, value)
	}
	if value, ok := vu.mutation.UpdatedAt(); ok {
		_spec.SetField(verification.FieldUpdatedAt, field.TypeTime, value)
	}
	if vu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   verification.UserTable,
			Columns: []string{verification.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   verification.UserTable,
			Columns: []string{verification.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, vu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{verification.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	vu.mutation.done = true
	return n, nil
}

// VerificationUpdateOne is the builder for updating a single Verification entity.
type VerificationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *VerificationMutation
}

// SetType sets the "type" field.
func (vuo *VerificationUpdateOne) SetType(v verification.Type) *VerificationUpdateOne {
	vuo.mutation.SetType(v)
	return vuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (vuo *VerificationUpdateOne) SetNillableType(v *verification.Type) *VerificationUpdateOne {
	if v != nil {
		vuo.SetType(*v)
	}
	return vuo
}

// SetCode sets the "code" field.
func (vuo *VerificationUpdateOne) SetCode(s string) *VerificationUpdateOne {
	vuo.mutation.SetCode(s)
	return vuo
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (vuo *VerificationUpdateOne) SetNillableCode(s *string) *VerificationUpdateOne {
	if s != nil {
		vuo.SetCode(*s)
	}
	return vuo
}

// SetAttempts sets the "attempts" field.
func (vuo *VerificationUpdateOne) SetAttempts(i int) *VerificationUpdateOne {
	vuo.mutation.ResetAttempts()
	vuo.mutation.SetAttempts(i)
	return vuo
}

// SetNillableAttempts sets the "attempts" field if the given value is not nil.
func (vuo *VerificationUpdateOne) SetNillableAttempts(i *int) *VerificationUpdateOne {
	if i != nil {
		vuo.SetAttempts(*i)
	}
	return vuo
}

// AddAttempts adds i to the "attempts" field.
func (vuo *VerificationUpdateOne) AddAttempts(i int) *VerificationUpdateOne {
	vuo.mutation.AddAttempts(i)
	return vuo
}

// SetExpiresAt sets the "expires_at" field.
func (vuo *VerificationUpdateOne) SetExpiresAt(t time.Time) *VerificationUpdateOne {
	vuo.mutation.SetExpiresAt(t)
	return vuo
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (vuo *VerificationUpdateOne) SetNillableExpiresAt(t *time.Time) *VerificationUpdateOne {
	if t != nil {
		vuo.SetExpiresAt(*t)
	}
	return vuo
}

// SetUpdatedAt sets the "updated_at" field.
func (vuo *VerificationUpdateOne) SetUpdatedAt(t time.Time) *VerificationUpdateOne {
	vuo.mutation.SetUpdatedAt(t)
	return vuo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (vuo *VerificationUpdateOne) SetUserID(id uuid.UUID) *VerificationUpdateOne {
	vuo.mutation.SetUserID(id)
	return vuo
}

// SetUser sets the "user" edge to the User entity.
func (vuo *VerificationUpdateOne) SetUser(u *User) *VerificationUpdateOne {
	return vuo.SetUserID(u.ID)
}

// Mutation returns the VerificationMutation object of the builder.
func (vuo *VerificationUpdateOne) Mutation() *VerificationMutation {
	return vuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (vuo *VerificationUpdateOne) ClearUser() *VerificationUpdateOne {
	vuo.mutation.ClearUser()
	return vuo
}

// Where appends a list predicates to the VerificationUpdate builder.
func (vuo *VerificationUpdateOne) Where(ps ...predicate.Verification) *VerificationUpdateOne {
	vuo.mutation.Where(ps...)
	return vuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vuo *VerificationUpdateOne) Select(field string, fields ...string) *VerificationUpdateOne {
	vuo.fields = append([]string{field}, fields...)
	return vuo
}

// Save executes the query and returns the updated Verification entity.
func (vuo *VerificationUpdateOne) Save(ctx context.Context) (*Verification, error) {
	vuo.defaults()
	return withHooks(ctx, vuo.sqlSave, vuo.mutation, vuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vuo *VerificationUpdateOne) SaveX(ctx context.Context) *Verification {
	node, err := vuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vuo *VerificationUpdateOne) Exec(ctx context.Context) error {
	_, err := vuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vuo *VerificationUpdateOne) ExecX(ctx context.Context) {
	if err := vuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vuo *VerificationUpdateOne) defaults() {
	if _, ok := vuo.mutation.UpdatedAt(); !ok {
		v := verification.UpdateDefaultUpdatedAt()
		vuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vuo *VerificationUpdateOne) check() error {
	if v, ok := vuo.mutation.GetType(); ok {
		if err := verification.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Verification.type": %w`, err)}
		}
	}
	if v, ok := vuo.mutation.Code(); ok {
		if err := verification.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "Verification.code": %w`, err)}
		}
	}
	if vuo.mutation.UserCleared() && len(vuo.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Verification.user"`)
	}
	return nil
}

func (vuo *VerificationUpdateOne) sqlSave(ctx context.Context) (_node *Verification, err error) {
	if err := vuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(verification.Table, verification.Columns, sqlgraph.NewFieldSpec(verification.FieldID, field.TypeUUID))
	id, ok := vuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Verification.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := vuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, verification.FieldID)
		for _, f := range fields {
			if !verification.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != verification.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vuo.mutation.GetType(); ok {
		_spec.SetField(verification.FieldType, field.TypeEnum, value)
	}
	if value, ok := vuo.mutation.Code(); ok {
		_spec.SetField(verification.FieldCode, field.TypeString, value)
	}
	if value, ok := vuo.mutation.Attempts(); ok {
		_spec.SetField(verification.FieldAttempts, field.TypeInt, value)
	}
	if value, ok := vuo.mutation.AddedAttempts(); ok {
		_spec.AddField(verification.FieldAttempts, field.TypeInt, value)
	}
	if value, ok := vuo.mutation.ExpiresAt(); ok {
		_spec.SetField(verification.FieldExpiresAt, field.TypeTime, value)
	}
	if value, ok := vuo.mutation.UpdatedAt(); ok {
		_spec.SetField(verification.FieldUpdatedAt, field.TypeTime, value)
	}
	if vuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   verification.UserTable,
			Columns: []string{verification.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   verification.UserTable,
			Columns: []string{verification.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Verification{config: vuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{verification.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	vuo.mutation.done = true
	return _node, nil
}
