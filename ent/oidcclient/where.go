// Code generated by ent, DO NOT EDIT.

package oidcclient

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/usegranthq/backend/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.OidcClient {
	return predicate.OidcClient(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.OidcClient {
	return predicate.OidcClient(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.OidcClient {
	return predicate.OidcClient(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.OidcClient {
	return predicate.OidcClient(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.OidcClient {
	return predicate.OidcClient(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.OidcClient {
	return predicate.OidcClient(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.OidcClient {
	return predicate.OidcClient(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.OidcClient {
	return predicate.OidcClient(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.OidcClient {
	return predicate.OidcClient(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.OidcClient {
	return predicate.OidcClient(sql.FieldEQ(FieldName, v))
}

// Audience applies equality check predicate on the "audience" field. It's identical to AudienceEQ.
func Audience(v string) predicate.OidcClient {
	return predicate.OidcClient(sql.FieldEQ(FieldAudience, v))
}

// ClientRefID applies equality check predicate on the "client_ref_id" field. It's identical to ClientRefIDEQ.
func ClientRefID(v string) predicate.OidcClient {
	return predicate.OidcClient(sql.FieldEQ(FieldClientRefID, v))
}

// ClientID applies equality check predicate on the "client_id" field. It's identical to ClientIDEQ.
func ClientID(v string) predicate.OidcClient {
	return predicate.OidcClient(sql.FieldEQ(FieldClientID, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.OidcClient {
	return predicate.OidcClient(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.OidcClient {
	return predicate.OidcClient(sql.FieldEQ(FieldUpdatedAt, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.OidcClient {
	return predicate.OidcClient(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.OidcClient {
	return predicate.OidcClient(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.OidcClient {
	return predicate.OidcClient(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.OidcClient {
	return predicate.OidcClient(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.OidcClient {
	return predicate.OidcClient(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.OidcClient {
	return predicate.OidcClient(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.OidcClient {
	return predicate.OidcClient(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.OidcClient {
	return predicate.OidcClient(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.OidcClient {
	return predicate.OidcClient(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.OidcClient {
	return predicate.OidcClient(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.OidcClient {
	return predicate.OidcClient(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.OidcClient {
	return predicate.OidcClient(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.OidcClient {
	return predicate.OidcClient(sql.FieldContainsFold(FieldName, v))
}

// AudienceEQ applies the EQ predicate on the "audience" field.
func AudienceEQ(v string) predicate.OidcClient {
	return predicate.OidcClient(sql.FieldEQ(FieldAudience, v))
}

// AudienceNEQ applies the NEQ predicate on the "audience" field.
func AudienceNEQ(v string) predicate.OidcClient {
	return predicate.OidcClient(sql.FieldNEQ(FieldAudience, v))
}

// AudienceIn applies the In predicate on the "audience" field.
func AudienceIn(vs ...string) predicate.OidcClient {
	return predicate.OidcClient(sql.FieldIn(FieldAudience, vs...))
}

// AudienceNotIn applies the NotIn predicate on the "audience" field.
func AudienceNotIn(vs ...string) predicate.OidcClient {
	return predicate.OidcClient(sql.FieldNotIn(FieldAudience, vs...))
}

// AudienceGT applies the GT predicate on the "audience" field.
func AudienceGT(v string) predicate.OidcClient {
	return predicate.OidcClient(sql.FieldGT(FieldAudience, v))
}

// AudienceGTE applies the GTE predicate on the "audience" field.
func AudienceGTE(v string) predicate.OidcClient {
	return predicate.OidcClient(sql.FieldGTE(FieldAudience, v))
}

// AudienceLT applies the LT predicate on the "audience" field.
func AudienceLT(v string) predicate.OidcClient {
	return predicate.OidcClient(sql.FieldLT(FieldAudience, v))
}

// AudienceLTE applies the LTE predicate on the "audience" field.
func AudienceLTE(v string) predicate.OidcClient {
	return predicate.OidcClient(sql.FieldLTE(FieldAudience, v))
}

// AudienceContains applies the Contains predicate on the "audience" field.
func AudienceContains(v string) predicate.OidcClient {
	return predicate.OidcClient(sql.FieldContains(FieldAudience, v))
}

// AudienceHasPrefix applies the HasPrefix predicate on the "audience" field.
func AudienceHasPrefix(v string) predicate.OidcClient {
	return predicate.OidcClient(sql.FieldHasPrefix(FieldAudience, v))
}

// AudienceHasSuffix applies the HasSuffix predicate on the "audience" field.
func AudienceHasSuffix(v string) predicate.OidcClient {
	return predicate.OidcClient(sql.FieldHasSuffix(FieldAudience, v))
}

// AudienceEqualFold applies the EqualFold predicate on the "audience" field.
func AudienceEqualFold(v string) predicate.OidcClient {
	return predicate.OidcClient(sql.FieldEqualFold(FieldAudience, v))
}

// AudienceContainsFold applies the ContainsFold predicate on the "audience" field.
func AudienceContainsFold(v string) predicate.OidcClient {
	return predicate.OidcClient(sql.FieldContainsFold(FieldAudience, v))
}

// ClientRefIDEQ applies the EQ predicate on the "client_ref_id" field.
func ClientRefIDEQ(v string) predicate.OidcClient {
	return predicate.OidcClient(sql.FieldEQ(FieldClientRefID, v))
}

// ClientRefIDNEQ applies the NEQ predicate on the "client_ref_id" field.
func ClientRefIDNEQ(v string) predicate.OidcClient {
	return predicate.OidcClient(sql.FieldNEQ(FieldClientRefID, v))
}

// ClientRefIDIn applies the In predicate on the "client_ref_id" field.
func ClientRefIDIn(vs ...string) predicate.OidcClient {
	return predicate.OidcClient(sql.FieldIn(FieldClientRefID, vs...))
}

// ClientRefIDNotIn applies the NotIn predicate on the "client_ref_id" field.
func ClientRefIDNotIn(vs ...string) predicate.OidcClient {
	return predicate.OidcClient(sql.FieldNotIn(FieldClientRefID, vs...))
}

// ClientRefIDGT applies the GT predicate on the "client_ref_id" field.
func ClientRefIDGT(v string) predicate.OidcClient {
	return predicate.OidcClient(sql.FieldGT(FieldClientRefID, v))
}

// ClientRefIDGTE applies the GTE predicate on the "client_ref_id" field.
func ClientRefIDGTE(v string) predicate.OidcClient {
	return predicate.OidcClient(sql.FieldGTE(FieldClientRefID, v))
}

// ClientRefIDLT applies the LT predicate on the "client_ref_id" field.
func ClientRefIDLT(v string) predicate.OidcClient {
	return predicate.OidcClient(sql.FieldLT(FieldClientRefID, v))
}

// ClientRefIDLTE applies the LTE predicate on the "client_ref_id" field.
func ClientRefIDLTE(v string) predicate.OidcClient {
	return predicate.OidcClient(sql.FieldLTE(FieldClientRefID, v))
}

// ClientRefIDContains applies the Contains predicate on the "client_ref_id" field.
func ClientRefIDContains(v string) predicate.OidcClient {
	return predicate.OidcClient(sql.FieldContains(FieldClientRefID, v))
}

// ClientRefIDHasPrefix applies the HasPrefix predicate on the "client_ref_id" field.
func ClientRefIDHasPrefix(v string) predicate.OidcClient {
	return predicate.OidcClient(sql.FieldHasPrefix(FieldClientRefID, v))
}

// ClientRefIDHasSuffix applies the HasSuffix predicate on the "client_ref_id" field.
func ClientRefIDHasSuffix(v string) predicate.OidcClient {
	return predicate.OidcClient(sql.FieldHasSuffix(FieldClientRefID, v))
}

// ClientRefIDEqualFold applies the EqualFold predicate on the "client_ref_id" field.
func ClientRefIDEqualFold(v string) predicate.OidcClient {
	return predicate.OidcClient(sql.FieldEqualFold(FieldClientRefID, v))
}

// ClientRefIDContainsFold applies the ContainsFold predicate on the "client_ref_id" field.
func ClientRefIDContainsFold(v string) predicate.OidcClient {
	return predicate.OidcClient(sql.FieldContainsFold(FieldClientRefID, v))
}

// ClientIDEQ applies the EQ predicate on the "client_id" field.
func ClientIDEQ(v string) predicate.OidcClient {
	return predicate.OidcClient(sql.FieldEQ(FieldClientID, v))
}

// ClientIDNEQ applies the NEQ predicate on the "client_id" field.
func ClientIDNEQ(v string) predicate.OidcClient {
	return predicate.OidcClient(sql.FieldNEQ(FieldClientID, v))
}

// ClientIDIn applies the In predicate on the "client_id" field.
func ClientIDIn(vs ...string) predicate.OidcClient {
	return predicate.OidcClient(sql.FieldIn(FieldClientID, vs...))
}

// ClientIDNotIn applies the NotIn predicate on the "client_id" field.
func ClientIDNotIn(vs ...string) predicate.OidcClient {
	return predicate.OidcClient(sql.FieldNotIn(FieldClientID, vs...))
}

// ClientIDGT applies the GT predicate on the "client_id" field.
func ClientIDGT(v string) predicate.OidcClient {
	return predicate.OidcClient(sql.FieldGT(FieldClientID, v))
}

// ClientIDGTE applies the GTE predicate on the "client_id" field.
func ClientIDGTE(v string) predicate.OidcClient {
	return predicate.OidcClient(sql.FieldGTE(FieldClientID, v))
}

// ClientIDLT applies the LT predicate on the "client_id" field.
func ClientIDLT(v string) predicate.OidcClient {
	return predicate.OidcClient(sql.FieldLT(FieldClientID, v))
}

// ClientIDLTE applies the LTE predicate on the "client_id" field.
func ClientIDLTE(v string) predicate.OidcClient {
	return predicate.OidcClient(sql.FieldLTE(FieldClientID, v))
}

// ClientIDContains applies the Contains predicate on the "client_id" field.
func ClientIDContains(v string) predicate.OidcClient {
	return predicate.OidcClient(sql.FieldContains(FieldClientID, v))
}

// ClientIDHasPrefix applies the HasPrefix predicate on the "client_id" field.
func ClientIDHasPrefix(v string) predicate.OidcClient {
	return predicate.OidcClient(sql.FieldHasPrefix(FieldClientID, v))
}

// ClientIDHasSuffix applies the HasSuffix predicate on the "client_id" field.
func ClientIDHasSuffix(v string) predicate.OidcClient {
	return predicate.OidcClient(sql.FieldHasSuffix(FieldClientID, v))
}

// ClientIDEqualFold applies the EqualFold predicate on the "client_id" field.
func ClientIDEqualFold(v string) predicate.OidcClient {
	return predicate.OidcClient(sql.FieldEqualFold(FieldClientID, v))
}

// ClientIDContainsFold applies the ContainsFold predicate on the "client_id" field.
func ClientIDContainsFold(v string) predicate.OidcClient {
	return predicate.OidcClient(sql.FieldContainsFold(FieldClientID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.OidcClient {
	return predicate.OidcClient(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.OidcClient {
	return predicate.OidcClient(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.OidcClient {
	return predicate.OidcClient(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.OidcClient {
	return predicate.OidcClient(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.OidcClient {
	return predicate.OidcClient(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.OidcClient {
	return predicate.OidcClient(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.OidcClient {
	return predicate.OidcClient(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.OidcClient {
	return predicate.OidcClient(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.OidcClient {
	return predicate.OidcClient(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.OidcClient {
	return predicate.OidcClient(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.OidcClient {
	return predicate.OidcClient(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.OidcClient {
	return predicate.OidcClient(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.OidcClient {
	return predicate.OidcClient(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.OidcClient {
	return predicate.OidcClient(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.OidcClient {
	return predicate.OidcClient(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.OidcClient {
	return predicate.OidcClient(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasProject applies the HasEdge predicate on the "project" edge.
func HasProject() predicate.OidcClient {
	return predicate.OidcClient(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProjectTable, ProjectColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProjectWith applies the HasEdge predicate on the "project" edge with a given conditions (other predicates).
func HasProjectWith(preds ...predicate.Project) predicate.OidcClient {
	return predicate.OidcClient(func(s *sql.Selector) {
		step := newProjectStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.OidcClient) predicate.OidcClient {
	return predicate.OidcClient(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.OidcClient) predicate.OidcClient {
	return predicate.OidcClient(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.OidcClient) predicate.OidcClient {
	return predicate.OidcClient(sql.NotPredicates(p))
}
