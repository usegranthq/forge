// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/usegranthq/backend/ent/user"
	"github.com/usegranthq/backend/ent/userverification"
)

// UserVerificationCreate is the builder for creating a UserVerification entity.
type UserVerificationCreate struct {
	config
	mutation *UserVerificationMutation
	hooks    []Hook
}

// SetAttemptID sets the "attempt_id" field.
func (uvc *UserVerificationCreate) SetAttemptID(u uuid.UUID) *UserVerificationCreate {
	uvc.mutation.SetAttemptID(u)
	return uvc
}

// SetNillableAttemptID sets the "attempt_id" field if the given value is not nil.
func (uvc *UserVerificationCreate) SetNillableAttemptID(u *uuid.UUID) *UserVerificationCreate {
	if u != nil {
		uvc.SetAttemptID(*u)
	}
	return uvc
}

// SetCode sets the "code" field.
func (uvc *UserVerificationCreate) SetCode(s string) *UserVerificationCreate {
	uvc.mutation.SetCode(s)
	return uvc
}

// SetAttempts sets the "attempts" field.
func (uvc *UserVerificationCreate) SetAttempts(i int) *UserVerificationCreate {
	uvc.mutation.SetAttempts(i)
	return uvc
}

// SetNillableAttempts sets the "attempts" field if the given value is not nil.
func (uvc *UserVerificationCreate) SetNillableAttempts(i *int) *UserVerificationCreate {
	if i != nil {
		uvc.SetAttempts(*i)
	}
	return uvc
}

// SetExpiresAt sets the "expires_at" field.
func (uvc *UserVerificationCreate) SetExpiresAt(t time.Time) *UserVerificationCreate {
	uvc.mutation.SetExpiresAt(t)
	return uvc
}

// SetCreatedAt sets the "created_at" field.
func (uvc *UserVerificationCreate) SetCreatedAt(t time.Time) *UserVerificationCreate {
	uvc.mutation.SetCreatedAt(t)
	return uvc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (uvc *UserVerificationCreate) SetNillableCreatedAt(t *time.Time) *UserVerificationCreate {
	if t != nil {
		uvc.SetCreatedAt(*t)
	}
	return uvc
}

// SetUpdatedAt sets the "updated_at" field.
func (uvc *UserVerificationCreate) SetUpdatedAt(t time.Time) *UserVerificationCreate {
	uvc.mutation.SetUpdatedAt(t)
	return uvc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (uvc *UserVerificationCreate) SetNillableUpdatedAt(t *time.Time) *UserVerificationCreate {
	if t != nil {
		uvc.SetUpdatedAt(*t)
	}
	return uvc
}

// SetID sets the "id" field.
func (uvc *UserVerificationCreate) SetID(u uuid.UUID) *UserVerificationCreate {
	uvc.mutation.SetID(u)
	return uvc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (uvc *UserVerificationCreate) SetNillableID(u *uuid.UUID) *UserVerificationCreate {
	if u != nil {
		uvc.SetID(*u)
	}
	return uvc
}

// SetUserID sets the "user" edge to the User entity by ID.
func (uvc *UserVerificationCreate) SetUserID(id uuid.UUID) *UserVerificationCreate {
	uvc.mutation.SetUserID(id)
	return uvc
}

// SetUser sets the "user" edge to the User entity.
func (uvc *UserVerificationCreate) SetUser(u *User) *UserVerificationCreate {
	return uvc.SetUserID(u.ID)
}

// Mutation returns the UserVerificationMutation object of the builder.
func (uvc *UserVerificationCreate) Mutation() *UserVerificationMutation {
	return uvc.mutation
}

// Save creates the UserVerification in the database.
func (uvc *UserVerificationCreate) Save(ctx context.Context) (*UserVerification, error) {
	uvc.defaults()
	return withHooks(ctx, uvc.sqlSave, uvc.mutation, uvc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (uvc *UserVerificationCreate) SaveX(ctx context.Context) *UserVerification {
	v, err := uvc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uvc *UserVerificationCreate) Exec(ctx context.Context) error {
	_, err := uvc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uvc *UserVerificationCreate) ExecX(ctx context.Context) {
	if err := uvc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uvc *UserVerificationCreate) defaults() {
	if _, ok := uvc.mutation.AttemptID(); !ok {
		v := userverification.DefaultAttemptID()
		uvc.mutation.SetAttemptID(v)
	}
	if _, ok := uvc.mutation.Attempts(); !ok {
		v := userverification.DefaultAttempts
		uvc.mutation.SetAttempts(v)
	}
	if _, ok := uvc.mutation.CreatedAt(); !ok {
		v := userverification.DefaultCreatedAt()
		uvc.mutation.SetCreatedAt(v)
	}
	if _, ok := uvc.mutation.UpdatedAt(); !ok {
		v := userverification.DefaultUpdatedAt()
		uvc.mutation.SetUpdatedAt(v)
	}
	if _, ok := uvc.mutation.ID(); !ok {
		v := userverification.DefaultID()
		uvc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uvc *UserVerificationCreate) check() error {
	if _, ok := uvc.mutation.AttemptID(); !ok {
		return &ValidationError{Name: "attempt_id", err: errors.New(`ent: missing required field "UserVerification.attempt_id"`)}
	}
	if _, ok := uvc.mutation.Code(); !ok {
		return &ValidationError{Name: "code", err: errors.New(`ent: missing required field "UserVerification.code"`)}
	}
	if v, ok := uvc.mutation.Code(); ok {
		if err := userverification.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "UserVerification.code": %w`, err)}
		}
	}
	if _, ok := uvc.mutation.Attempts(); !ok {
		return &ValidationError{Name: "attempts", err: errors.New(`ent: missing required field "UserVerification.attempts"`)}
	}
	if _, ok := uvc.mutation.ExpiresAt(); !ok {
		return &ValidationError{Name: "expires_at", err: errors.New(`ent: missing required field "UserVerification.expires_at"`)}
	}
	if _, ok := uvc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "UserVerification.created_at"`)}
	}
	if _, ok := uvc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "UserVerification.updated_at"`)}
	}
	if len(uvc.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "UserVerification.user"`)}
	}
	return nil
}

func (uvc *UserVerificationCreate) sqlSave(ctx context.Context) (*UserVerification, error) {
	if err := uvc.check(); err != nil {
		return nil, err
	}
	_node, _spec := uvc.createSpec()
	if err := sqlgraph.CreateNode(ctx, uvc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	uvc.mutation.id = &_node.ID
	uvc.mutation.done = true
	return _node, nil
}

func (uvc *UserVerificationCreate) createSpec() (*UserVerification, *sqlgraph.CreateSpec) {
	var (
		_node = &UserVerification{config: uvc.config}
		_spec = sqlgraph.NewCreateSpec(userverification.Table, sqlgraph.NewFieldSpec(userverification.FieldID, field.TypeUUID))
	)
	if id, ok := uvc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := uvc.mutation.AttemptID(); ok {
		_spec.SetField(userverification.FieldAttemptID, field.TypeUUID, value)
		_node.AttemptID = value
	}
	if value, ok := uvc.mutation.Code(); ok {
		_spec.SetField(userverification.FieldCode, field.TypeString, value)
		_node.Code = value
	}
	if value, ok := uvc.mutation.Attempts(); ok {
		_spec.SetField(userverification.FieldAttempts, field.TypeInt, value)
		_node.Attempts = value
	}
	if value, ok := uvc.mutation.ExpiresAt(); ok {
		_spec.SetField(userverification.FieldExpiresAt, field.TypeTime, value)
		_node.ExpiresAt = value
	}
	if value, ok := uvc.mutation.CreatedAt(); ok {
		_spec.SetField(userverification.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := uvc.mutation.UpdatedAt(); ok {
		_spec.SetField(userverification.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := uvc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userverification.UserTable,
			Columns: []string{userverification.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_user_verifications = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// UserVerificationCreateBulk is the builder for creating many UserVerification entities in bulk.
type UserVerificationCreateBulk struct {
	config
	err      error
	builders []*UserVerificationCreate
}

// Save creates the UserVerification entities in the database.
func (uvcb *UserVerificationCreateBulk) Save(ctx context.Context) ([]*UserVerification, error) {
	if uvcb.err != nil {
		return nil, uvcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(uvcb.builders))
	nodes := make([]*UserVerification, len(uvcb.builders))
	mutators := make([]Mutator, len(uvcb.builders))
	for i := range uvcb.builders {
		func(i int, root context.Context) {
			builder := uvcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserVerificationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, uvcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, uvcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, uvcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (uvcb *UserVerificationCreateBulk) SaveX(ctx context.Context) []*UserVerification {
	v, err := uvcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uvcb *UserVerificationCreateBulk) Exec(ctx context.Context) error {
	_, err := uvcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uvcb *UserVerificationCreateBulk) ExecX(ctx context.Context) {
	if err := uvcb.Exec(ctx); err != nil {
		panic(err)
	}
}
