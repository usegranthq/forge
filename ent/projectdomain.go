// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/usegranthq/forge/ent/project"
	"github.com/usegranthq/forge/ent/projectdomain"
)

// ProjectDomain is the model entity for the ProjectDomain schema.
type ProjectDomain struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Domain holds the value of the "domain" field.
	Domain string `json:"domain,omitempty"`
	// Verified holds the value of the "verified" field.
	Verified bool `json:"verified,omitempty"`
	// VerifiedAt holds the value of the "verified_at" field.
	VerifiedAt string `json:"verified_at,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProjectDomainQuery when eager-loading is set.
	Edges          ProjectDomainEdges `json:"edges"`
	project_domain *uuid.UUID
	selectValues   sql.SelectValues
}

// ProjectDomainEdges holds the relations/edges for other nodes in the graph.
type ProjectDomainEdges struct {
	// Project holds the value of the project edge.
	Project *Project `json:"project,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ProjectOrErr returns the Project value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProjectDomainEdges) ProjectOrErr() (*Project, error) {
	if e.Project != nil {
		return e.Project, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: project.Label}
	}
	return nil, &NotLoadedError{edge: "project"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ProjectDomain) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case projectdomain.FieldVerified:
			values[i] = new(sql.NullBool)
		case projectdomain.FieldDomain, projectdomain.FieldVerifiedAt:
			values[i] = new(sql.NullString)
		case projectdomain.FieldCreatedAt, projectdomain.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case projectdomain.FieldID:
			values[i] = new(uuid.UUID)
		case projectdomain.ForeignKeys[0]: // project_domain
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ProjectDomain fields.
func (pd *ProjectDomain) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case projectdomain.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				pd.ID = *value
			}
		case projectdomain.FieldDomain:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field domain", values[i])
			} else if value.Valid {
				pd.Domain = value.String
			}
		case projectdomain.FieldVerified:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field verified", values[i])
			} else if value.Valid {
				pd.Verified = value.Bool
			}
		case projectdomain.FieldVerifiedAt:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field verified_at", values[i])
			} else if value.Valid {
				pd.VerifiedAt = value.String
			}
		case projectdomain.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pd.CreatedAt = value.Time
			}
		case projectdomain.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pd.UpdatedAt = value.Time
			}
		case projectdomain.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field project_domain", values[i])
			} else if value.Valid {
				pd.project_domain = new(uuid.UUID)
				*pd.project_domain = *value.S.(*uuid.UUID)
			}
		default:
			pd.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ProjectDomain.
// This includes values selected through modifiers, order, etc.
func (pd *ProjectDomain) Value(name string) (ent.Value, error) {
	return pd.selectValues.Get(name)
}

// QueryProject queries the "project" edge of the ProjectDomain entity.
func (pd *ProjectDomain) QueryProject() *ProjectQuery {
	return NewProjectDomainClient(pd.config).QueryProject(pd)
}

// Update returns a builder for updating this ProjectDomain.
// Note that you need to call ProjectDomain.Unwrap() before calling this method if this ProjectDomain
// was returned from a transaction, and the transaction was committed or rolled back.
func (pd *ProjectDomain) Update() *ProjectDomainUpdateOne {
	return NewProjectDomainClient(pd.config).UpdateOne(pd)
}

// Unwrap unwraps the ProjectDomain entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pd *ProjectDomain) Unwrap() *ProjectDomain {
	_tx, ok := pd.config.driver.(*txDriver)
	if !ok {
		panic("ent: ProjectDomain is not a transactional entity")
	}
	pd.config.driver = _tx.drv
	return pd
}

// String implements the fmt.Stringer.
func (pd *ProjectDomain) String() string {
	var builder strings.Builder
	builder.WriteString("ProjectDomain(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pd.ID))
	builder.WriteString("domain=")
	builder.WriteString(pd.Domain)
	builder.WriteString(", ")
	builder.WriteString("verified=")
	builder.WriteString(fmt.Sprintf("%v", pd.Verified))
	builder.WriteString(", ")
	builder.WriteString("verified_at=")
	builder.WriteString(pd.VerifiedAt)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(pd.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pd.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ProjectDomains is a parsable slice of ProjectDomain.
type ProjectDomains []*ProjectDomain
