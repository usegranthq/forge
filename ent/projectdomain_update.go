// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/usegranthq/forge/ent/predicate"
	"github.com/usegranthq/forge/ent/project"
	"github.com/usegranthq/forge/ent/projectdomain"
)

// ProjectDomainUpdate is the builder for updating ProjectDomain entities.
type ProjectDomainUpdate struct {
	config
	hooks    []Hook
	mutation *ProjectDomainMutation
}

// Where appends a list predicates to the ProjectDomainUpdate builder.
func (pdu *ProjectDomainUpdate) Where(ps ...predicate.ProjectDomain) *ProjectDomainUpdate {
	pdu.mutation.Where(ps...)
	return pdu
}

// SetDomain sets the "domain" field.
func (pdu *ProjectDomainUpdate) SetDomain(s string) *ProjectDomainUpdate {
	pdu.mutation.SetDomain(s)
	return pdu
}

// SetNillableDomain sets the "domain" field if the given value is not nil.
func (pdu *ProjectDomainUpdate) SetNillableDomain(s *string) *ProjectDomainUpdate {
	if s != nil {
		pdu.SetDomain(*s)
	}
	return pdu
}

// SetVerified sets the "verified" field.
func (pdu *ProjectDomainUpdate) SetVerified(b bool) *ProjectDomainUpdate {
	pdu.mutation.SetVerified(b)
	return pdu
}

// SetNillableVerified sets the "verified" field if the given value is not nil.
func (pdu *ProjectDomainUpdate) SetNillableVerified(b *bool) *ProjectDomainUpdate {
	if b != nil {
		pdu.SetVerified(*b)
	}
	return pdu
}

// SetVerifiedAt sets the "verified_at" field.
func (pdu *ProjectDomainUpdate) SetVerifiedAt(s string) *ProjectDomainUpdate {
	pdu.mutation.SetVerifiedAt(s)
	return pdu
}

// SetNillableVerifiedAt sets the "verified_at" field if the given value is not nil.
func (pdu *ProjectDomainUpdate) SetNillableVerifiedAt(s *string) *ProjectDomainUpdate {
	if s != nil {
		pdu.SetVerifiedAt(*s)
	}
	return pdu
}

// ClearVerifiedAt clears the value of the "verified_at" field.
func (pdu *ProjectDomainUpdate) ClearVerifiedAt() *ProjectDomainUpdate {
	pdu.mutation.ClearVerifiedAt()
	return pdu
}

// SetUpdatedAt sets the "updated_at" field.
func (pdu *ProjectDomainUpdate) SetUpdatedAt(t time.Time) *ProjectDomainUpdate {
	pdu.mutation.SetUpdatedAt(t)
	return pdu
}

// SetProjectID sets the "project" edge to the Project entity by ID.
func (pdu *ProjectDomainUpdate) SetProjectID(id uuid.UUID) *ProjectDomainUpdate {
	pdu.mutation.SetProjectID(id)
	return pdu
}

// SetProject sets the "project" edge to the Project entity.
func (pdu *ProjectDomainUpdate) SetProject(p *Project) *ProjectDomainUpdate {
	return pdu.SetProjectID(p.ID)
}

// Mutation returns the ProjectDomainMutation object of the builder.
func (pdu *ProjectDomainUpdate) Mutation() *ProjectDomainMutation {
	return pdu.mutation
}

// ClearProject clears the "project" edge to the Project entity.
func (pdu *ProjectDomainUpdate) ClearProject() *ProjectDomainUpdate {
	pdu.mutation.ClearProject()
	return pdu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pdu *ProjectDomainUpdate) Save(ctx context.Context) (int, error) {
	pdu.defaults()
	return withHooks(ctx, pdu.sqlSave, pdu.mutation, pdu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pdu *ProjectDomainUpdate) SaveX(ctx context.Context) int {
	affected, err := pdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pdu *ProjectDomainUpdate) Exec(ctx context.Context) error {
	_, err := pdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pdu *ProjectDomainUpdate) ExecX(ctx context.Context) {
	if err := pdu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pdu *ProjectDomainUpdate) defaults() {
	if _, ok := pdu.mutation.UpdatedAt(); !ok {
		v := projectdomain.UpdateDefaultUpdatedAt()
		pdu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pdu *ProjectDomainUpdate) check() error {
	if v, ok := pdu.mutation.Domain(); ok {
		if err := projectdomain.DomainValidator(v); err != nil {
			return &ValidationError{Name: "domain", err: fmt.Errorf(`ent: validator failed for field "ProjectDomain.domain": %w`, err)}
		}
	}
	if pdu.mutation.ProjectCleared() && len(pdu.mutation.ProjectIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ProjectDomain.project"`)
	}
	return nil
}

func (pdu *ProjectDomainUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pdu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(projectdomain.Table, projectdomain.Columns, sqlgraph.NewFieldSpec(projectdomain.FieldID, field.TypeUUID))
	if ps := pdu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pdu.mutation.Domain(); ok {
		_spec.SetField(projectdomain.FieldDomain, field.TypeString, value)
	}
	if value, ok := pdu.mutation.Verified(); ok {
		_spec.SetField(projectdomain.FieldVerified, field.TypeBool, value)
	}
	if value, ok := pdu.mutation.VerifiedAt(); ok {
		_spec.SetField(projectdomain.FieldVerifiedAt, field.TypeString, value)
	}
	if pdu.mutation.VerifiedAtCleared() {
		_spec.ClearField(projectdomain.FieldVerifiedAt, field.TypeString)
	}
	if value, ok := pdu.mutation.UpdatedAt(); ok {
		_spec.SetField(projectdomain.FieldUpdatedAt, field.TypeTime, value)
	}
	if pdu.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projectdomain.ProjectTable,
			Columns: []string{projectdomain.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pdu.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projectdomain.ProjectTable,
			Columns: []string{projectdomain.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{projectdomain.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pdu.mutation.done = true
	return n, nil
}

// ProjectDomainUpdateOne is the builder for updating a single ProjectDomain entity.
type ProjectDomainUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProjectDomainMutation
}

// SetDomain sets the "domain" field.
func (pduo *ProjectDomainUpdateOne) SetDomain(s string) *ProjectDomainUpdateOne {
	pduo.mutation.SetDomain(s)
	return pduo
}

// SetNillableDomain sets the "domain" field if the given value is not nil.
func (pduo *ProjectDomainUpdateOne) SetNillableDomain(s *string) *ProjectDomainUpdateOne {
	if s != nil {
		pduo.SetDomain(*s)
	}
	return pduo
}

// SetVerified sets the "verified" field.
func (pduo *ProjectDomainUpdateOne) SetVerified(b bool) *ProjectDomainUpdateOne {
	pduo.mutation.SetVerified(b)
	return pduo
}

// SetNillableVerified sets the "verified" field if the given value is not nil.
func (pduo *ProjectDomainUpdateOne) SetNillableVerified(b *bool) *ProjectDomainUpdateOne {
	if b != nil {
		pduo.SetVerified(*b)
	}
	return pduo
}

// SetVerifiedAt sets the "verified_at" field.
func (pduo *ProjectDomainUpdateOne) SetVerifiedAt(s string) *ProjectDomainUpdateOne {
	pduo.mutation.SetVerifiedAt(s)
	return pduo
}

// SetNillableVerifiedAt sets the "verified_at" field if the given value is not nil.
func (pduo *ProjectDomainUpdateOne) SetNillableVerifiedAt(s *string) *ProjectDomainUpdateOne {
	if s != nil {
		pduo.SetVerifiedAt(*s)
	}
	return pduo
}

// ClearVerifiedAt clears the value of the "verified_at" field.
func (pduo *ProjectDomainUpdateOne) ClearVerifiedAt() *ProjectDomainUpdateOne {
	pduo.mutation.ClearVerifiedAt()
	return pduo
}

// SetUpdatedAt sets the "updated_at" field.
func (pduo *ProjectDomainUpdateOne) SetUpdatedAt(t time.Time) *ProjectDomainUpdateOne {
	pduo.mutation.SetUpdatedAt(t)
	return pduo
}

// SetProjectID sets the "project" edge to the Project entity by ID.
func (pduo *ProjectDomainUpdateOne) SetProjectID(id uuid.UUID) *ProjectDomainUpdateOne {
	pduo.mutation.SetProjectID(id)
	return pduo
}

// SetProject sets the "project" edge to the Project entity.
func (pduo *ProjectDomainUpdateOne) SetProject(p *Project) *ProjectDomainUpdateOne {
	return pduo.SetProjectID(p.ID)
}

// Mutation returns the ProjectDomainMutation object of the builder.
func (pduo *ProjectDomainUpdateOne) Mutation() *ProjectDomainMutation {
	return pduo.mutation
}

// ClearProject clears the "project" edge to the Project entity.
func (pduo *ProjectDomainUpdateOne) ClearProject() *ProjectDomainUpdateOne {
	pduo.mutation.ClearProject()
	return pduo
}

// Where appends a list predicates to the ProjectDomainUpdate builder.
func (pduo *ProjectDomainUpdateOne) Where(ps ...predicate.ProjectDomain) *ProjectDomainUpdateOne {
	pduo.mutation.Where(ps...)
	return pduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pduo *ProjectDomainUpdateOne) Select(field string, fields ...string) *ProjectDomainUpdateOne {
	pduo.fields = append([]string{field}, fields...)
	return pduo
}

// Save executes the query and returns the updated ProjectDomain entity.
func (pduo *ProjectDomainUpdateOne) Save(ctx context.Context) (*ProjectDomain, error) {
	pduo.defaults()
	return withHooks(ctx, pduo.sqlSave, pduo.mutation, pduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pduo *ProjectDomainUpdateOne) SaveX(ctx context.Context) *ProjectDomain {
	node, err := pduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pduo *ProjectDomainUpdateOne) Exec(ctx context.Context) error {
	_, err := pduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pduo *ProjectDomainUpdateOne) ExecX(ctx context.Context) {
	if err := pduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pduo *ProjectDomainUpdateOne) defaults() {
	if _, ok := pduo.mutation.UpdatedAt(); !ok {
		v := projectdomain.UpdateDefaultUpdatedAt()
		pduo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pduo *ProjectDomainUpdateOne) check() error {
	if v, ok := pduo.mutation.Domain(); ok {
		if err := projectdomain.DomainValidator(v); err != nil {
			return &ValidationError{Name: "domain", err: fmt.Errorf(`ent: validator failed for field "ProjectDomain.domain": %w`, err)}
		}
	}
	if pduo.mutation.ProjectCleared() && len(pduo.mutation.ProjectIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ProjectDomain.project"`)
	}
	return nil
}

func (pduo *ProjectDomainUpdateOne) sqlSave(ctx context.Context) (_node *ProjectDomain, err error) {
	if err := pduo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(projectdomain.Table, projectdomain.Columns, sqlgraph.NewFieldSpec(projectdomain.FieldID, field.TypeUUID))
	id, ok := pduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ProjectDomain.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, projectdomain.FieldID)
		for _, f := range fields {
			if !projectdomain.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != projectdomain.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pduo.mutation.Domain(); ok {
		_spec.SetField(projectdomain.FieldDomain, field.TypeString, value)
	}
	if value, ok := pduo.mutation.Verified(); ok {
		_spec.SetField(projectdomain.FieldVerified, field.TypeBool, value)
	}
	if value, ok := pduo.mutation.VerifiedAt(); ok {
		_spec.SetField(projectdomain.FieldVerifiedAt, field.TypeString, value)
	}
	if pduo.mutation.VerifiedAtCleared() {
		_spec.ClearField(projectdomain.FieldVerifiedAt, field.TypeString)
	}
	if value, ok := pduo.mutation.UpdatedAt(); ok {
		_spec.SetField(projectdomain.FieldUpdatedAt, field.TypeTime, value)
	}
	if pduo.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projectdomain.ProjectTable,
			Columns: []string{projectdomain.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pduo.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projectdomain.ProjectTable,
			Columns: []string{projectdomain.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ProjectDomain{config: pduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{projectdomain.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pduo.mutation.done = true
	return _node, nil
}
